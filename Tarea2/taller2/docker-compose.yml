version: '3.4'
  
services:

  proxy:
    image: traefik
    command:
        - "--web"
        #- "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
        - "--entrypoints=Name:http Address::80"
        - "--entrypoints=Name:https Address::443 TLS"
        - "--defaultentrypoints=http,https"
        - "--acme"
        - "--acme.storage=/etc/traefik/acme/acme.json"
        - "--acme.entryPoint=https"
        - "--acme.httpChallenge.entryPoint=http"
        - "--acme.OnHostRule=true"
        - "--acme.onDemand=false"
        - "--acme.email=test@gmail.com"
        - "--docker"
        - "--docker.domain=localhost"
        - "--docker.watch"
        - "--logLevel=DEBUG"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    networks:
      - net_primary

  database:
    image: mysql:5.7
    volumes:
      - mysql-volume:/var/lib/mysql
    restart: always
    ports:
      - "3320:3306"
    environment:
      MYSQL_ROOT_PASSWORD: taller2
      MYSQL_USER: taller2
      MYSQL_PASSWORD: taller2
      MYSQL_DATABASE: db_taller2
    labels:
      - "traefik.enable=false"
    networks:
      - net_secondary

  backend:
    #build: ./backend
    image: vin001/microservicio_tarea2
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.backend=api-backend"
      - "traefik.frontend.rule=Host:api-backend.localhost"
      - "traefik.docker.network=net_secondary"
    networks:
      - net_secondary
    depends_on:
       - database
    links:
      - database:basedatostaller2


  frontend:
    #build: ./frontend
    image: andresbox5/frontendtaller_tarea2    
    labels:
      - "traefik.enable=true"
      - "traefik.backend=app-frontend"
      - "traefik.frontend.rule=Host:app-frontend.localhost"
      - "traefik.docker.network=net_primary"
    networks:
      - net_primary
      - net_secondary
    depends_on:
       - backend
    links:
      - backend:backendtaller2


#ELK
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - net_primary
      - net_secondary

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - net_primary
      - net_secondary
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - net_primary
      - net_secondary
    depends_on:
      - elasticsearch



volumes:
  mysql-volume:

networks:
  net_primary:
  net_secondary:

  